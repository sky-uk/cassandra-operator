
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.2
  creationTimestamp: null
  name: cassandras.core.sky.uk
spec:
  group: core.sky.uk
  names:
    kind: Cassandra
    listKind: CassandraList
    plural: cassandras
    singular: cassandra
  scope: Namespaced
  validation:
    openAPIV3Schema:
      description: Cassandra defines a Cassandra cluster
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: CassandraSpec is the specification for the Cassandra resource
          properties:
            datacenter:
              description: The assigned datacenter name for the Cassandra cluster.
              type: string
            pod:
              description: Pod corresponds to a Cassandra node.
              properties:
                bootstrapperImage:
                  description: The name of the Docker image used to prepare the configuration
                    for the Cassandra node before it can be started.
                  type: string
                image:
                  description: The Docker image to run on each Cassandra node in the
                    cluster. It is recommended to use one of the official Cassandra
                    images, version 3
                  type: string
                livenessProbe:
                  description: Liveness probe for the cassandra container
                  properties:
                    failureThreshold:
                      description: Minimum consecutive failures for the probe to be
                        considered failed after having succeeded. Minimum value is
                        1.
                      format: int32
                      type: integer
                    initialDelaySeconds:
                      description: Number of seconds after the container has started
                        before probes are initiated.
                      format: int32
                      type: integer
                    periodSeconds:
                      description: How often (in seconds) to perform the probe. Minimum
                        value is 1.
                      format: int32
                      type: integer
                    successThreshold:
                      description: Minimum consecutive successes for the probe to
                        be considered successful after having failed.
                      format: int32
                      type: integer
                    timeoutSeconds:
                      description: Timeout for the probe.
                      format: int32
                      type: integer
                  type: object
                readinessProbe:
                  description: Readiness probe for the cassandra container
                  properties:
                    failureThreshold:
                      description: Minimum consecutive failures for the probe to be
                        considered failed after having succeeded. Minimum value is
                        1.
                      format: int32
                      type: integer
                    initialDelaySeconds:
                      description: Number of seconds after the container has started
                        before probes are initiated.
                      format: int32
                      type: integer
                    periodSeconds:
                      description: How often (in seconds) to perform the probe. Minimum
                        value is 1.
                      format: int32
                      type: integer
                    successThreshold:
                      description: Minimum consecutive successes for the probe to
                        be considered successful after having failed.
                      format: int32
                      type: integer
                    timeoutSeconds:
                      description: Timeout for the probe.
                      format: int32
                      type: integer
                  type: object
                resources:
                  description: ResourceRequirements describes the compute resource
                    requirements.
                  properties:
                    limits:
                      additionalProperties:
                        type: string
                      description: 'Limits describes the maximum amount of compute
                        resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                      type: object
                    requests:
                      additionalProperties:
                        type: string
                      description: 'Requests describes the minimum amount of compute
                        resources required. If Requests is omitted for a container,
                        it defaults to Limits if that is explicitly specified, otherwise
                        to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                      type: object
                  type: object
                sidecar:
                  description: Sidecar container specification
                  properties:
                    image:
                      description: The Docker image for the sidecar container running
                        on each Cassandra node to expose node status.
                      type: string
                  type: object
              required:
              - resources
              - sidecar
              type: object
            racks:
              items:
                description: Rack defines the rack topology in the cluster, where
                  a rack has a number of replicas located in the same physical grouping
                  (e.g. zone). At least one rack must be supplied.
                properties:
                  name:
                    description: Name of the rack.
                    type: string
                  replicas:
                    description: The desired number of replicas in the rack.
                    format: int32
                    type: integer
                  storage:
                    description: The rack storage options.
                    items:
                      description: Storage defines the storage properties shared by
                        pods in the same rack. Multiple volume types are available
                        such as `emptyDir` and `persistentVolumeClaim`. The volume
                        types available are expected to be a subset of the volume
                        types defined in `k8s.io/api/core/v1/VolumeSource`. Only one
                        type of volume may be specified.
                      properties:
                        emptyDir:
                          description: The volume as an empty directory of type `k8s.io/api/core/v1/EmptyDirVolumeSource`
                          properties:
                            medium:
                              description: 'What type of storage medium should back
                                this directory. The default is "" which means to use
                                the node''s default medium. Must be an empty string
                                (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir'
                              type: string
                            sizeLimit:
                              description: 'Total amount of local storage required
                                for this EmptyDir volume. The size limit is also applicable
                                for memory medium. The maximum usage on memory medium
                                EmptyDir would be the minimum value between the SizeLimit
                                specified here and the sum of memory limits of all
                                containers in a pod. The default is nil which means
                                that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir'
                              type: string
                          type: object
                        path:
                          description: The full path to the volume in the pod
                          type: string
                        persistentVolumeClaim:
                          description: The volume as a persistent volume of type `k8s.io/api/core/v1/PersistentVolumeClaimSpec`
                          properties:
                            accessModes:
                              description: 'AccessModes contains the desired access
                                modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                              items:
                                type: string
                              type: array
                            dataSource:
                              description: This field requires the VolumeSnapshotDataSource
                                alpha feature gate to be enabled and currently VolumeSnapshot
                                is the only supported data source. If the provisioner
                                can support VolumeSnapshot data source, it will create
                                a new volume and data will be restored to the volume
                                at the same time. If the provisioner does not support
                                VolumeSnapshot data source, volume will not be created
                                and the failure will be reported as an event. In the
                                future, we plan to support more data source types
                                and the behavior of the provisioner may change.
                              properties:
                                apiGroup:
                                  description: APIGroup is the group for the resource
                                    being referenced. If APIGroup is not specified,
                                    the specified Kind must be in the core API group.
                                    For any other third-party types, APIGroup is required.
                                  type: string
                                kind:
                                  description: Kind is the type of resource being
                                    referenced
                                  type: string
                                name:
                                  description: Name is the name of resource being
                                    referenced
                                  type: string
                              required:
                              - kind
                              - name
                              type: object
                            resources:
                              description: 'Resources represents the minimum resources
                                the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                              properties:
                                limits:
                                  additionalProperties:
                                    type: string
                                  description: 'Limits describes the maximum amount
                                    of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                                  type: object
                                requests:
                                  additionalProperties:
                                    type: string
                                  description: 'Requests describes the minimum amount
                                    of compute resources required. If Requests is
                                    omitted for a container, it defaults to Limits
                                    if that is explicitly specified, otherwise to
                                    an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                                  type: object
                              type: object
                            selector:
                              description: A label query over volumes to consider
                                for binding.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label
                                    selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a
                                      selector that contains values, a key, and an
                                      operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the
                                          selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are
                                          In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string
                                          values. If the operator is In or NotIn,
                                          the values array must be non-empty. If the
                                          operator is Exists or DoesNotExist, the
                                          values array must be empty. This array is
                                          replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value}
                                    pairs. A single {key,value} in the matchLabels
                                    map is equivalent to an element of matchExpressions,
                                    whose key field is "key", the operator is "In",
                                    and the values array contains only "value". The
                                    requirements are ANDed.
                                  type: object
                              type: object
                            storageClassName:
                              description: 'Name of the StorageClass required by the
                                claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                              type: string
                            volumeMode:
                              description: volumeMode defines what type of volume
                                is required by the claim. Value of Filesystem is implied
                                when not included in claim spec. This is a beta feature.
                              type: string
                            volumeName:
                              description: VolumeName is the binding reference to
                                the PersistentVolume backing this claim.
                              type: string
                          type: object
                      type: object
                    type: array
                  zone:
                    description: Zone in which the rack resides. This is set against
                      the `failure-domain.beta.kubernetes.io/zone` value in the node
                      affinity rule of the corresponding `StatefulSet`.
                    type: string
                required:
                - name
                - replicas
                - storage
                - zone
                type: object
              type: array
            snapshot:
              description: Snapshot defines the snapshot creation and deletion configuration
              properties:
                image:
                  description: The name of the Docker image used to create and cleanup
                    snapshots.
                  type: string
                keyspaces:
                  description: List of keyspaces to snapshot. Leave empty to snapshot
                    all keyspaces.
                  items:
                    type: string
                  type: array
                resources:
                  description: Resource requirements for the Snapshot job
                  properties:
                    limits:
                      additionalProperties:
                        type: string
                      description: 'Limits describes the maximum amount of compute
                        resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                      type: object
                    requests:
                      additionalProperties:
                        type: string
                      description: 'Requests describes the minimum amount of compute
                        resources required. If Requests is omitted for a container,
                        it defaults to Limits if that is explicitly specified, otherwise
                        to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                      type: object
                  type: object
                retentionPolicy:
                  description: RetentionPolicy defines how long the snapshots should
                    be kept for and how often the cleanup task should run
                  properties:
                    cleanupSchedule:
                      description: Crontab expression specifying when snapshot cleanup
                        will run. It follows the cron format, see https://en.wikipedia.org/wiki/Cron
                      type: string
                    cleanupTimeoutSeconds:
                      description: Time limit for the cleanup command to run.
                      format: int32
                      type: integer
                    resources:
                      description: Resource requirements for the Snapshot Cleanup
                        Job
                      properties:
                        limits:
                          additionalProperties:
                            type: string
                          description: 'Limits describes the maximum amount of compute
                            resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                          type: object
                        requests:
                          additionalProperties:
                            type: string
                          description: 'Requests describes the minimum amount of compute
                            resources required. If Requests is omitted for a container,
                            it defaults to Limits if that is explicitly specified,
                            otherwise to an implementation-defined value. More info:
                            https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                          type: object
                      type: object
                    retentionPeriodDays:
                      description: The period of time for which snapshots will be
                        retained. Snapshots older than this period will be deleted.
                      format: int32
                      type: integer
                  required:
                  - cleanupSchedule
                  - resources
                  type: object
                schedule:
                  description: Crontab expression specifying when snapshots will be
                    taken. It follows the cron format, see https://en.wikipedia.org/wiki/Cron
                  type: string
                timeoutSeconds:
                  description: Time limit for the snapshot command to run.
                  format: int32
                  type: integer
              required:
              - resources
              - schedule
              type: object
          required:
          - pod
          - racks
          type: object
        status:
          description: CassandraStatus is the status for the Cassandra resource
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
